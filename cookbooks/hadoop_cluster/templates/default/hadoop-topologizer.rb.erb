#!/usr/bin/env ruby

# Given an IP address, returns a dummy topology path synthesized from the
# cluster, facet, and index. All nodes whose facet_index is less than
# the rack_size are assigned to the 'lo' rack; the rest to the 'hi' rack
#
# For example, with node[:fake_rack_size] 4, nodes will be mapped like this:
#
#     'gibbon-master-0'        gibbon/rack0
#     'gibbon-worker-0'        gibbon/rack0
#     'gibbon-worker-3'        gibbon/rack0
#     'gibbon-worker-4'        gibbon/rack1
#     'gibbon-worker-7'        gibbon/rack1
#     'gibbon-worker-8'        gibbon/DEFAULT
#     'gibbon-worker-69'       gibbon/DEFAULT
#
# A reckless cheapskate can terminate all the nodes in one rack and let the namenode sort itself out.

RACK_SIZE = <%= @hadoop[:fake_rack_size] %>
CLUSTER   = '<%= node[:cluster_name] %>'

# calculate lookup table while we're in chef -- keeps the script simple & local
NODE_TO_RACK_MAPPING = {
<%- @datanodes.sort_by{|c| c.node.name.to_s }.each do |comp| %>
  <%- facet_index = comp.facet_index.to_i ; rack_size = @hadoop[:fake_rack_size].to_i %>
  <%- rack_name   = (facet_index / rack_size < 2) ? "rack#{facet_index / rack_size}" : 'DEFAULT' %>
  <%- comp_info   = [comp.facet, facet_index, comp.node.name, rack_name].inspect %>
  <%= "%-36s" % comp.private_ip.inspect      %> => <%= comp_info %>,
  <%= "%-36s" % comp.public_ip.inspect       %> => <%= comp_info %>,
  <%= "%-36s" % comp.node[:hostname].inspect %> => <%= comp_info %>,
  <%= "%-36s" % comp.node[:fqdn].inspect     %> => <%= comp_info %>,
<%- end %>
}

if ARGV.first == '--debug'
  ARGV.shift
  $debug = true
else
  $debug = false
end

ARGV.each do |req_ip|
  req_ip = req_ip.strip
  facet, facet_index, name, rack_name = node_info = NODE_TO_RACK_MAPPING[req_ip]

  # DEFAULT rack if we have nothing
  if node_info.nil? || node_info.any?{|x| x.nil? }
    $stderr.puts "No rack known for #{req_ip}" if $debug
    rack_name = 'DEFAULT' ; node_info = []
  end

  topology_path = "/#{CLUSTER}/#{rack_name}"
  $stderr.puts "Returning topology path #{topology_path} for #{req_ip} (#{node_info.join(', ')})" if $debug
  puts topology_path
end
